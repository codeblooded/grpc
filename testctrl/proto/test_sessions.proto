// Copyright 2020 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proto;

option go_package = "github.com/grpc/grpc/testctrl/genproto/testctrl/svc";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/longrunning/operations.proto";
import "src/proto/grpc/testing/control.proto";

service TestSessions {
  // Starts a set of test scenarios.
  //
  // This is a long-running operation that is managed by the Operations service
  // on the same server.  The long-running operation will assign a unique
  // identifier to the session.
  //
  // The unique identifier can be used to poll for the session's status and
  // results.  Streaming is not supported at present.
  //
  // It can also be used to cancel while in progress, but cancellations operate
  // like killing a running process. If they occur while results are being
  // reported, the persistent storage may receive some but not all of them.
  //
  // For the specification of a google.longrunning.Operation message, see the
  // Long-running AIP at https://aip.dev/151.
  rpc StartTestSession(StartTestSessionRequest) returns (google.longrunning.Operation) {
    option (google.longrunning.operation_info) = {
      response_type: "TestSessionResults"
      metadata_type: "TestSessionMetadata"
    };
  }
}

message Component {
  enum Kind {
    // No kind was specified, so the service will attempt to infer one.
    //
    // This inference works as follows:
    //   1. If this field belongs to the driver_container of the
    //      StartTestSessionRequest, this kind is inferred to be a driver.
    //   2. Otherwise, this field is inferred to be a client worker.
    UNSPECIFIED = 0;

    // Orchestrates the test amongst workers and reports results.
    DRIVER = 1;

    // Processes incoming requests from client containers.
    SERVER = 2;

    // Sends outgoing requests to a server container.
    CLIENT = 3;
  }

  // The container image and a version as it appears in a docker registry.
  //
  // When using GCR, this will likely be a fully-qualified URL and either an
  // explicit tag or sha256 hash. For example, a Java worker image may be
  // similar to one of the following:
  //
  //   - gcr.io/grpc-testing/java_worker:v3.2.19
  //   - gcr.io/grpc-testing/java_worker@sha256:82b6360a84c19f23ed7ee9...
  //
  // The "latest" tag is automatically set by the registry, and there
  // are no guarantees that it will point to a specific image. It should be
  // avoided.
  string container = 1;  // [(google.api.field_behavior) = REQUIRED];

  // The kind which assigns the responsibilities of this container.
  Kind kind = 2;  // [(google.api.field_behavior) = OPTIONAL];

  // The number of identical components that should be created with these
  // settings. For example, a "client" component can be configured once and
  // specify "2" replicas. Two identical versions will be available for tests.
  //
  // This field is ignored for driver components. It may eventually be supported
  // on server components, but this is not yet available.
  int32 replicas = 3;
}

message StartTestSessionRequest {
  // The test scenarios to run as a part of the test session.
  repeated grpc.testing.Scenario scenarios = 1;  // [(google.api.field_behavior) = REQUIRED];

  // The component which orchestrates running the test scenarios amongst workers.
  Component driver = 2;  // [(google.api.field_behavior) = OPTIONAL];

  // The components that are required as part of the test. Normally, this will
  // involve at least one server and a number of clients.
  repeated Component workers = 3;  // [(google.api.field_behavior) = REQUIRED];

  // An optional location where the results should be written.
  oneof result_destination {
    // The name of the BigQuery table where results should be written.
    string bq_results_table = 4;  // [(google.api.field_behavior) = OPTIONAL];

    // The fully qualified GCS URI where a results file should be written.
    string gcs_results_file_uri = 5;  // [(google.api.field_behavior) = OPTIONAL];
  }
 }

message TestSessionResults {
  // The results for each scenario.
  repeated grpc.testing.ScenarioResult scenario_results = 1;

  // The amount of time that this session lived, including all actions from
  // scheduling to termination.
  google.protobuf.Duration time_elapsed = 2;
}

message Event {
  enum Kind {
    // The event does not conform to the standard lifecycle.
    UNKNOWN = 0;

    // Currently waiting for resources to be provisioned.
    QUEUE = 1;

    // Creating, reserving or provisioning resources.
    PROVISION = 2;

    // Currently being executed on the provisioned resources.
    RUN = 3;

    // An error has occurred, preventing further events.
    ERROR = 4;
  }

  // The kind of event.
  Kind kind = 1;

  // The time the event was recorded.
  google.protobuf.Timestamp time = 2;

  // The component which is the subject of this event, if applicable. When the
  // event pertains to the entire TestSession, this field will be empty.
  Component subject = 3;

}

message TestSessionMetadata {
  // The latest event for the test session as a whole, assuming it has not been
  // terminated.
  Event latest_event = 1;

  // The latest event on all of the components of the test session. This
  // provides more fine-grained insight when an error has terminated the
  // test session.
  Event latest_component_event = 2;

  // The location of a log with all events related to this session.
  string event_log_uri = 3;

  // The name of the kubernetes cluster where tests were run.
  string gke_cluster = 4;

  // The version of the service that is processing this request.
  string service_version = 5;

  // The time that the server acknowledged the request to create a test session.
  google.protobuf.Timestamp create_time = 6;
}

