// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/proto/grpc/testing/proxy-service.proto

package testing

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProxyStat struct {
	Latency              float64  `protobuf:"fixed64,1,opt,name=latency,proto3" json:"latency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProxyStat) Reset()         { *m = ProxyStat{} }
func (m *ProxyStat) String() string { return proto.CompactTextString(m) }
func (*ProxyStat) ProtoMessage()    {}
func (*ProxyStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3b45d72290d617a, []int{0}
}

func (m *ProxyStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProxyStat.Unmarshal(m, b)
}
func (m *ProxyStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProxyStat.Marshal(b, m, deterministic)
}
func (m *ProxyStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyStat.Merge(m, src)
}
func (m *ProxyStat) XXX_Size() int {
	return xxx_messageInfo_ProxyStat.Size(m)
}
func (m *ProxyStat) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyStat.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyStat proto.InternalMessageInfo

func (m *ProxyStat) GetLatency() float64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

func init() {
	proto.RegisterType((*ProxyStat)(nil), "grpc.testing.ProxyStat")
}

func init() {
	proto.RegisterFile("src/proto/grpc/testing/proxy-service.proto", fileDescriptor_e3b45d72290d617a)
}

var fileDescriptor_e3b45d72290d617a = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xc9, 0x45, 0x69, 0xf0, 0x34, 0x17, 0x4b, 0xbc, 0x48, 0x51, 0x28, 0x82, 0x59, 0xb0,
	0x78, 0xea, 0x41, 0xb0, 0x82, 0x1e, 0xa5, 0x15, 0x0f, 0xde, 0xd2, 0x38, 0xc6, 0xc0, 0x6e, 0x66,
	0x49, 0x46, 0xb1, 0xbf, 0xd2, 0xbf, 0x24, 0xd9, 0xb4, 0xc5, 0xa5, 0xed, 0x31, 0x8f, 0xef, 0x9b,
	0x3c, 0x9e, 0xbc, 0x4a, 0xd1, 0x56, 0x6d, 0x24, 0xa6, 0xca, 0xc5, 0xd6, 0x56, 0x8c, 0x89, 0x7d,
	0x70, 0x39, 0xfa, 0x59, 0x5d, 0x27, 0x8c, 0xdf, 0xde, 0xa2, 0xee, 0x00, 0x38, 0xc9, 0x84, 0x5e,
	0x13, 0xea, 0xe2, 0x80, 0x69, 0x29, 0x70, 0xa4, 0xba, 0x38, 0x6a, 0x74, 0x80, 0x4a, 0x6c, 0x38,
	0x15, 0x66, 0x74, 0x29, 0x07, 0xcf, 0xf9, 0xbb, 0x05, 0x1b, 0x86, 0xa1, 0x3c, 0xae, 0x0d, 0x63,
	0xb0, 0xab, 0xa1, 0x38, 0x17, 0x63, 0x31, 0xdf, 0x3c, 0x6f, 0x7e, 0x85, 0x84, 0x8e, 0x9b, 0xd5,
	0x1e, 0x03, 0x2f, 0x4a, 0x37, 0x98, 0xca, 0xc1, 0x23, 0xf2, 0x8c, 0xc2, 0x87, 0x77, 0x00, 0xfa,
	0x7f, 0x47, 0xfd, 0x4a, 0xfe, 0x5d, 0xa9, 0x7e, 0x56, 0xec, 0x35, 0x3f, 0x95, 0x72, 0x8e, 0x2d,
	0x45, 0x7e, 0xf1, 0x0d, 0xc2, 0x69, 0x9f, 0xdc, 0x96, 0x52, 0x7b, 0xce, 0x8e, 0x05, 0xdc, 0x6d,
	0xe4, 0x27, 0x9f, 0x18, 0xce, 0xfa, 0x4c, 0xce, 0xc8, 0x45, 0xd3, 0x3c, 0x18, 0x36, 0xfb, 0x0f,
	0xdc, 0xdf, 0xbe, 0x4d, 0x9c, 0xe7, 0xcf, 0xaf, 0xa5, 0xb6, 0xd4, 0x94, 0x7d, 0xb6, 0x23, 0x59,
	0x8e, 0x75, 0xe5, 0x30, 0xec, 0x6e, 0xb7, 0x3c, 0xea, 0xb2, 0xc9, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x80, 0xee, 0xdb, 0x14, 0xbc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProxyClientServiceClient is the client API for ProxyClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProxyClientServiceClient interface {
	GetConfig(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ClientConfig, error)
	ReportTime(ctx context.Context, opts ...grpc.CallOption) (ProxyClientService_ReportTimeClient, error)
	ReportHist(ctx context.Context, opts ...grpc.CallOption) (ProxyClientService_ReportHistClient, error)
}

type proxyClientServiceClient struct {
	cc *grpc.ClientConn
}

func NewProxyClientServiceClient(cc *grpc.ClientConn) ProxyClientServiceClient {
	return &proxyClientServiceClient{cc}
}

func (c *proxyClientServiceClient) GetConfig(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ClientConfig, error) {
	out := new(ClientConfig)
	err := c.cc.Invoke(ctx, "/grpc.testing.ProxyClientService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClientServiceClient) ReportTime(ctx context.Context, opts ...grpc.CallOption) (ProxyClientService_ReportTimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProxyClientService_serviceDesc.Streams[0], "/grpc.testing.ProxyClientService/ReportTime", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyClientServiceReportTimeClient{stream}
	return x, nil
}

type ProxyClientService_ReportTimeClient interface {
	Send(*ProxyStat) error
	CloseAndRecv() (*Void, error)
	grpc.ClientStream
}

type proxyClientServiceReportTimeClient struct {
	grpc.ClientStream
}

func (x *proxyClientServiceReportTimeClient) Send(m *ProxyStat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyClientServiceReportTimeClient) CloseAndRecv() (*Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *proxyClientServiceClient) ReportHist(ctx context.Context, opts ...grpc.CallOption) (ProxyClientService_ReportHistClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProxyClientService_serviceDesc.Streams[1], "/grpc.testing.ProxyClientService/ReportHist", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyClientServiceReportHistClient{stream}
	return x, nil
}

type ProxyClientService_ReportHistClient interface {
	Send(*HistogramData) error
	CloseAndRecv() (*Void, error)
	grpc.ClientStream
}

type proxyClientServiceReportHistClient struct {
	grpc.ClientStream
}

func (x *proxyClientServiceReportHistClient) Send(m *HistogramData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyClientServiceReportHistClient) CloseAndRecv() (*Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyClientServiceServer is the server API for ProxyClientService service.
type ProxyClientServiceServer interface {
	GetConfig(context.Context, *Void) (*ClientConfig, error)
	ReportTime(ProxyClientService_ReportTimeServer) error
	ReportHist(ProxyClientService_ReportHistServer) error
}

// UnimplementedProxyClientServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProxyClientServiceServer struct {
}

func (*UnimplementedProxyClientServiceServer) GetConfig(ctx context.Context, req *Void) (*ClientConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedProxyClientServiceServer) ReportTime(srv ProxyClientService_ReportTimeServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportTime not implemented")
}
func (*UnimplementedProxyClientServiceServer) ReportHist(srv ProxyClientService_ReportHistServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportHist not implemented")
}

func RegisterProxyClientServiceServer(s *grpc.Server, srv ProxyClientServiceServer) {
	s.RegisterService(&_ProxyClientService_serviceDesc, srv)
}

func _ProxyClientService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyClientServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.testing.ProxyClientService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyClientServiceServer).GetConfig(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyClientService_ReportTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyClientServiceServer).ReportTime(&proxyClientServiceReportTimeServer{stream})
}

type ProxyClientService_ReportTimeServer interface {
	SendAndClose(*Void) error
	Recv() (*ProxyStat, error)
	grpc.ServerStream
}

type proxyClientServiceReportTimeServer struct {
	grpc.ServerStream
}

func (x *proxyClientServiceReportTimeServer) SendAndClose(m *Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyClientServiceReportTimeServer) Recv() (*ProxyStat, error) {
	m := new(ProxyStat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProxyClientService_ReportHist_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyClientServiceServer).ReportHist(&proxyClientServiceReportHistServer{stream})
}

type ProxyClientService_ReportHistServer interface {
	SendAndClose(*Void) error
	Recv() (*HistogramData, error)
	grpc.ServerStream
}

type proxyClientServiceReportHistServer struct {
	grpc.ServerStream
}

func (x *proxyClientServiceReportHistServer) SendAndClose(m *Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyClientServiceReportHistServer) Recv() (*HistogramData, error) {
	m := new(HistogramData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProxyClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.testing.ProxyClientService",
	HandlerType: (*ProxyClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _ProxyClientService_GetConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReportTime",
			Handler:       _ProxyClientService_ReportTime_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReportHist",
			Handler:       _ProxyClientService_ReportHist_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "src/proto/grpc/testing/proxy-service.proto",
}
