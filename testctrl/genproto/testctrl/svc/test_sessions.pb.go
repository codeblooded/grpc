// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test_sessions.proto

package svc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	testing "github.com/grpc/grpc/testctrl/genproto/grpc/testing"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Component_Kind int32

const (
	// No kind was specified, so the service will attempt to infer one.
	//
	// This inference works as follows:
	//   1. If this field belongs to the driver_container of the
	//      StartTestSessionRequest, this kind is inferred to be a driver.
	//   2. Otherwise, this field is inferred to be a client worker.
	Component_UNSPECIFIED Component_Kind = 0
	// Orchestrates the test amongst workers and reports results.
	Component_DRIVER Component_Kind = 1
	// Processes incoming requests from client containers.
	Component_SERVER Component_Kind = 2
	// Sends outgoing requests to a server container.
	Component_CLIENT Component_Kind = 3
)

var Component_Kind_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "DRIVER",
	2: "SERVER",
	3: "CLIENT",
}

var Component_Kind_value = map[string]int32{
	"UNSPECIFIED": 0,
	"DRIVER":      1,
	"SERVER":      2,
	"CLIENT":      3,
}

func (x Component_Kind) String() string {
	return proto.EnumName(Component_Kind_name, int32(x))
}

func (Component_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2673dbce64cc8799, []int{0, 0}
}

type Event_Kind int32

const (
	// An infrastructure problem. This is outside of the test runner's control,
	// and a bug should be filed if it is encountered.
	Event_INTERNAL Event_Kind = 0
	// Waiting for an executor to process the test session.
	Event_QUEUE Event_Kind = 1
	// An executor has been assigned to provision and monitor the session;
	// however, work has not yet begun on this event's subject.
	Event_ACCEPT Event_Kind = 2
	// Reserving and configuring resources for the event's subject.
	Event_PROVISION Event_Kind = 3
	// Resources are responding with a healthy signal. However, this is not
	// indicative of tests running.
	Event_RUN Event_Kind = 4
	// Resources terminated or released as expected. It does not indicate that
	// the tests were successful or results were recorded.
	Event_DONE Event_Kind = 5
	// An irrecoverable error has caused the subject of the event to terminate.
	Event_ERROR Event_Kind = 6
)

var Event_Kind_name = map[int32]string{
	0: "INTERNAL",
	1: "QUEUE",
	2: "ACCEPT",
	3: "PROVISION",
	4: "RUN",
	5: "DONE",
	6: "ERROR",
}

var Event_Kind_value = map[string]int32{
	"INTERNAL":  0,
	"QUEUE":     1,
	"ACCEPT":    2,
	"PROVISION": 3,
	"RUN":       4,
	"DONE":      5,
	"ERROR":     6,
}

func (x Event_Kind) String() string {
	return proto.EnumName(Event_Kind_name, int32(x))
}

func (Event_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2673dbce64cc8799, []int{3, 0}
}

type Component struct {
	// The container image and a version as it appears in a docker registry.
	//
	// When using GCR, this will likely be a fully-qualified URL and either an
	// explicit tag or sha256 hash. For example, a Java worker image may be
	// similar to one of the following:
	//
	//   - gcr.io/grpc-testing/java_worker:v3.2.19
	//   - gcr.io/grpc-testing/java_worker@sha256:82b6360a84c19f23ed7ee9...
	//
	// The "latest" tag is automatically set by the registry, and there
	// are no guarantees that it will point to a specific image. It should be
	// avoided.
	Container string `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	// The kind which assigns the responsibilities of this container.
	Kind Component_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=proto.Component_Kind" json:"kind,omitempty"`
	// The number of identical components that should be created with these
	// settings. For example, a "client" component can be configured once and
	// specify "2" replicas. Two identical versions will be available for tests.
	//
	// This field is ignored for driver components. It may eventually be supported
	// on server components, but this is not yet available.
	Replicas             int32    `protobuf:"varint,3,opt,name=replicas,proto3" json:"replicas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Component) Reset()         { *m = Component{} }
func (m *Component) String() string { return proto.CompactTextString(m) }
func (*Component) ProtoMessage()    {}
func (*Component) Descriptor() ([]byte, []int) {
	return fileDescriptor_2673dbce64cc8799, []int{0}
}

func (m *Component) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Component.Unmarshal(m, b)
}
func (m *Component) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Component.Marshal(b, m, deterministic)
}
func (m *Component) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Component.Merge(m, src)
}
func (m *Component) XXX_Size() int {
	return xxx_messageInfo_Component.Size(m)
}
func (m *Component) XXX_DiscardUnknown() {
	xxx_messageInfo_Component.DiscardUnknown(m)
}

var xxx_messageInfo_Component proto.InternalMessageInfo

func (m *Component) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *Component) GetKind() Component_Kind {
	if m != nil {
		return m.Kind
	}
	return Component_UNSPECIFIED
}

func (m *Component) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

type StartTestSessionRequest struct {
	// The test scenarios to run as a part of the test session.
	Scenarios []*testing.Scenario `protobuf:"bytes,1,rep,name=scenarios,proto3" json:"scenarios,omitempty"`
	// The component which orchestrates running the test scenarios amongst workers.
	Driver *Component `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver,omitempty"`
	// The components that are required as part of the test. Normally, this will
	// involve at least one server and a number of clients.
	Workers []*Component `protobuf:"bytes,3,rep,name=workers,proto3" json:"workers,omitempty"`
	// An optional location where the results should be written.
	//
	// Types that are valid to be assigned to ResultDestination:
	//	*StartTestSessionRequest_BqResultsTable
	//	*StartTestSessionRequest_GcsResultsFileUri
	ResultDestination    isStartTestSessionRequest_ResultDestination `protobuf_oneof:"result_destination"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *StartTestSessionRequest) Reset()         { *m = StartTestSessionRequest{} }
func (m *StartTestSessionRequest) String() string { return proto.CompactTextString(m) }
func (*StartTestSessionRequest) ProtoMessage()    {}
func (*StartTestSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2673dbce64cc8799, []int{1}
}

func (m *StartTestSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartTestSessionRequest.Unmarshal(m, b)
}
func (m *StartTestSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartTestSessionRequest.Marshal(b, m, deterministic)
}
func (m *StartTestSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartTestSessionRequest.Merge(m, src)
}
func (m *StartTestSessionRequest) XXX_Size() int {
	return xxx_messageInfo_StartTestSessionRequest.Size(m)
}
func (m *StartTestSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartTestSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartTestSessionRequest proto.InternalMessageInfo

func (m *StartTestSessionRequest) GetScenarios() []*testing.Scenario {
	if m != nil {
		return m.Scenarios
	}
	return nil
}

func (m *StartTestSessionRequest) GetDriver() *Component {
	if m != nil {
		return m.Driver
	}
	return nil
}

func (m *StartTestSessionRequest) GetWorkers() []*Component {
	if m != nil {
		return m.Workers
	}
	return nil
}

type isStartTestSessionRequest_ResultDestination interface {
	isStartTestSessionRequest_ResultDestination()
}

type StartTestSessionRequest_BqResultsTable struct {
	BqResultsTable string `protobuf:"bytes,4,opt,name=bq_results_table,json=bqResultsTable,proto3,oneof"`
}

type StartTestSessionRequest_GcsResultsFileUri struct {
	GcsResultsFileUri string `protobuf:"bytes,5,opt,name=gcs_results_file_uri,json=gcsResultsFileUri,proto3,oneof"`
}

func (*StartTestSessionRequest_BqResultsTable) isStartTestSessionRequest_ResultDestination() {}

func (*StartTestSessionRequest_GcsResultsFileUri) isStartTestSessionRequest_ResultDestination() {}

func (m *StartTestSessionRequest) GetResultDestination() isStartTestSessionRequest_ResultDestination {
	if m != nil {
		return m.ResultDestination
	}
	return nil
}

func (m *StartTestSessionRequest) GetBqResultsTable() string {
	if x, ok := m.GetResultDestination().(*StartTestSessionRequest_BqResultsTable); ok {
		return x.BqResultsTable
	}
	return ""
}

func (m *StartTestSessionRequest) GetGcsResultsFileUri() string {
	if x, ok := m.GetResultDestination().(*StartTestSessionRequest_GcsResultsFileUri); ok {
		return x.GcsResultsFileUri
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StartTestSessionRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StartTestSessionRequest_BqResultsTable)(nil),
		(*StartTestSessionRequest_GcsResultsFileUri)(nil),
	}
}

type TestSessionResults struct {
	// The results for each scenario.
	ScenarioResults []*testing.ScenarioResult `protobuf:"bytes,1,rep,name=scenario_results,json=scenarioResults,proto3" json:"scenario_results,omitempty"`
	// The amount of time that this session lived, including all actions from
	// scheduling to termination.
	TimeElapsed          *duration.Duration `protobuf:"bytes,2,opt,name=time_elapsed,json=timeElapsed,proto3" json:"time_elapsed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TestSessionResults) Reset()         { *m = TestSessionResults{} }
func (m *TestSessionResults) String() string { return proto.CompactTextString(m) }
func (*TestSessionResults) ProtoMessage()    {}
func (*TestSessionResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_2673dbce64cc8799, []int{2}
}

func (m *TestSessionResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestSessionResults.Unmarshal(m, b)
}
func (m *TestSessionResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestSessionResults.Marshal(b, m, deterministic)
}
func (m *TestSessionResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSessionResults.Merge(m, src)
}
func (m *TestSessionResults) XXX_Size() int {
	return xxx_messageInfo_TestSessionResults.Size(m)
}
func (m *TestSessionResults) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSessionResults.DiscardUnknown(m)
}

var xxx_messageInfo_TestSessionResults proto.InternalMessageInfo

func (m *TestSessionResults) GetScenarioResults() []*testing.ScenarioResult {
	if m != nil {
		return m.ScenarioResults
	}
	return nil
}

func (m *TestSessionResults) GetTimeElapsed() *duration.Duration {
	if m != nil {
		return m.TimeElapsed
	}
	return nil
}

type Event struct {
	// The name of the subject of the event. This may be the name of a test
	// session or the name of one of its components.
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// The kind of event.
	Kind Event_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=proto.Event_Kind" json:"kind,omitempty"`
	// The point in time when the event was noticed.
	Time                 *timestamp.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_2673dbce64cc8799, []int{3}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Event) GetKind() Event_Kind {
	if m != nil {
		return m.Kind
	}
	return Event_INTERNAL
}

func (m *Event) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type TestSessionMetadata struct {
	// The latest event for the test session as a whole, assuming it has not been
	// terminated.
	LatestEvent *Event `protobuf:"bytes,1,opt,name=latest_event,json=latestEvent,proto3" json:"latest_event,omitempty"`
	// The component error event that caused the session to error, if applicable.
	ComponentErrorEvent *Event `protobuf:"bytes,2,opt,name=component_error_event,json=componentErrorEvent,proto3" json:"component_error_event,omitempty"`
	// A URL with a file that contains all events for all components in the
	// session.
	EventLogUrl string `protobuf:"bytes,3,opt,name=event_log_url,json=eventLogUrl,proto3" json:"event_log_url,omitempty"`
	// The name of the kubernetes cluster where tests were run.
	GkeCluster string `protobuf:"bytes,4,opt,name=gke_cluster,json=gkeCluster,proto3" json:"gke_cluster,omitempty"`
	// The version of the service that is processing this request.
	ServiceVersion string `protobuf:"bytes,5,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	// The time that the server acknowledged the request to create a test session.
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TestSessionMetadata) Reset()         { *m = TestSessionMetadata{} }
func (m *TestSessionMetadata) String() string { return proto.CompactTextString(m) }
func (*TestSessionMetadata) ProtoMessage()    {}
func (*TestSessionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_2673dbce64cc8799, []int{4}
}

func (m *TestSessionMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestSessionMetadata.Unmarshal(m, b)
}
func (m *TestSessionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestSessionMetadata.Marshal(b, m, deterministic)
}
func (m *TestSessionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSessionMetadata.Merge(m, src)
}
func (m *TestSessionMetadata) XXX_Size() int {
	return xxx_messageInfo_TestSessionMetadata.Size(m)
}
func (m *TestSessionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSessionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TestSessionMetadata proto.InternalMessageInfo

func (m *TestSessionMetadata) GetLatestEvent() *Event {
	if m != nil {
		return m.LatestEvent
	}
	return nil
}

func (m *TestSessionMetadata) GetComponentErrorEvent() *Event {
	if m != nil {
		return m.ComponentErrorEvent
	}
	return nil
}

func (m *TestSessionMetadata) GetEventLogUrl() string {
	if m != nil {
		return m.EventLogUrl
	}
	return ""
}

func (m *TestSessionMetadata) GetGkeCluster() string {
	if m != nil {
		return m.GkeCluster
	}
	return ""
}

func (m *TestSessionMetadata) GetServiceVersion() string {
	if m != nil {
		return m.ServiceVersion
	}
	return ""
}

func (m *TestSessionMetadata) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.Component_Kind", Component_Kind_name, Component_Kind_value)
	proto.RegisterEnum("proto.Event_Kind", Event_Kind_name, Event_Kind_value)
	proto.RegisterType((*Component)(nil), "proto.Component")
	proto.RegisterType((*StartTestSessionRequest)(nil), "proto.StartTestSessionRequest")
	proto.RegisterType((*TestSessionResults)(nil), "proto.TestSessionResults")
	proto.RegisterType((*Event)(nil), "proto.Event")
	proto.RegisterType((*TestSessionMetadata)(nil), "proto.TestSessionMetadata")
}

func init() { proto.RegisterFile("test_sessions.proto", fileDescriptor_2673dbce64cc8799) }

var fileDescriptor_2673dbce64cc8799 = []byte{
	// 814 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0xc7, 0x23, 0x7f, 0x24, 0xf1, 0x91, 0x9b, 0xa8, 0x9b, 0x16, 0x8c, 0xa7, 0xb4, 0x19, 0x01,
	0x83, 0xdb, 0x61, 0xe4, 0xc1, 0x85, 0xab, 0x72, 0x41, 0xea, 0xa8, 0xe0, 0x21, 0xd8, 0x61, 0x6d,
	0x67, 0x18, 0x6e, 0x34, 0xb2, 0x7c, 0x2a, 0x44, 0x14, 0xad, 0xb3, 0xbb, 0x32, 0x97, 0x3c, 0x02,
	0xf7, 0xf0, 0x0c, 0x5c, 0xf1, 0x16, 0x5c, 0xf2, 0x44, 0xcc, 0x7e, 0xc8, 0x75, 0x42, 0x3a, 0xbd,
	0x92, 0xf6, 0xec, 0xef, 0xec, 0xee, 0xf9, 0xef, 0x7f, 0x0f, 0x1c, 0x49, 0x14, 0x32, 0x12, 0x28,
	0x44, 0xc6, 0x0a, 0x11, 0xac, 0x38, 0x93, 0x8c, 0x34, 0xf5, 0xa7, 0xfb, 0x38, 0x65, 0x2c, 0xcd,
	0xb1, 0xaf, 0x47, 0x8b, 0xf2, 0x75, 0x7f, 0x59, 0xf2, 0x58, 0x66, 0xac, 0x30, 0x58, 0xf7, 0xc9,
	0xed, 0x79, 0x99, 0x5d, 0xa1, 0x90, 0xf1, 0xd5, 0xca, 0x02, 0x1f, 0x59, 0x20, 0x67, 0x45, 0xca,
	0xcb, 0xa2, 0xc8, 0x8a, 0xb4, 0xcf, 0x56, 0x68, 0x16, 0xb1, 0x9b, 0x75, 0x3f, 0x16, 0x3c, 0x31,
	0x4b, 0xf4, 0x53, 0xbe, 0x4a, 0xfa, 0xea, 0x40, 0x0a, 0x4c, 0x58, 0x21, 0x39, 0xcb, 0x0d, 0xe5,
	0xff, 0xe5, 0x40, 0x6b, 0xc8, 0xae, 0x56, 0xac, 0xc0, 0x42, 0x92, 0x47, 0xd0, 0x52, 0xd3, 0x71,
	0x56, 0x20, 0xef, 0x38, 0xc7, 0x4e, 0xaf, 0x45, 0xdf, 0x04, 0xc8, 0x53, 0x68, 0x5c, 0x66, 0xc5,
	0xb2, 0x53, 0x3b, 0x76, 0x7a, 0x07, 0x83, 0x87, 0x66, 0x85, 0x60, 0x93, 0x1d, 0x7c, 0x97, 0x15,
	0x4b, 0xaa, 0x11, 0xd2, 0x85, 0x7d, 0x8e, 0xab, 0x3c, 0x4b, 0x62, 0xd1, 0xa9, 0x1f, 0x3b, 0xbd,
	0x26, 0xdd, 0x8c, 0xfd, 0x17, 0xd0, 0x50, 0x24, 0x39, 0x04, 0x77, 0x3e, 0x9e, 0x9e, 0x87, 0xc3,
	0xd1, 0xab, 0x51, 0x78, 0xea, 0xed, 0x10, 0x80, 0xdd, 0x53, 0x3a, 0xba, 0x08, 0xa9, 0xe7, 0xa8,
	0xff, 0x69, 0x48, 0xd5, 0x7f, 0x4d, 0xfd, 0x0f, 0xcf, 0x46, 0xe1, 0x78, 0xe6, 0xd5, 0xfd, 0x3f,
	0x6a, 0xf0, 0xfe, 0x54, 0xc6, 0x5c, 0xce, 0x50, 0xc8, 0xa9, 0x91, 0x97, 0xe2, 0x75, 0x89, 0x42,
	0x92, 0x2f, 0xa0, 0x25, 0x12, 0x2c, 0x62, 0x9e, 0x31, 0xd1, 0x71, 0x8e, 0xeb, 0x3d, 0x77, 0xf0,
	0x5e, 0xa0, 0x6a, 0x0f, 0x6c, 0xed, 0xc1, 0xd4, 0x4e, 0xd3, 0x37, 0x20, 0xe9, 0xc1, 0xee, 0x92,
	0x67, 0x6b, 0xe4, 0xba, 0x2e, 0x77, 0xe0, 0xdd, 0xae, 0x8b, 0xda, 0x79, 0xf2, 0x0c, 0xf6, 0x7e,
	0x65, 0xfc, 0x12, 0xb9, 0xaa, 0xa9, 0x7e, 0x27, 0x5a, 0x01, 0xe4, 0x19, 0x78, 0x8b, 0xeb, 0x88,
	0xa3, 0x28, 0x73, 0x29, 0x22, 0x19, 0x2f, 0x72, 0xec, 0x34, 0x94, 0xa0, 0xdf, 0xee, 0xd0, 0x83,
	0xc5, 0x35, 0x35, 0x13, 0x33, 0x15, 0x27, 0x9f, 0xc3, 0x83, 0x34, 0x11, 0x1b, 0xf8, 0x75, 0x96,
	0x63, 0x54, 0xf2, 0xac, 0xd3, 0xb4, 0xfc, 0xfd, 0x34, 0x11, 0x36, 0xe1, 0x55, 0x96, 0xe3, 0x9c,
	0x67, 0x2f, 0x1f, 0x00, 0x31, 0x78, 0xb4, 0xd4, 0xa5, 0xe9, 0x9b, 0xf7, 0xff, 0x74, 0x80, 0xdc,
	0xd0, 0x45, 0xe7, 0x90, 0x6f, 0xc0, 0xab, 0xca, 0xad, 0x36, 0xb1, 0xf2, 0x3c, 0x7a, 0x8b, 0x3c,
	0x1a, 0xa2, 0x87, 0xe2, 0xc6, 0x58, 0x90, 0xaf, 0xa0, 0xad, 0xac, 0x18, 0x61, 0x1e, 0xaf, 0x04,
	0x2e, 0xad, 0x60, 0x1f, 0x04, 0xc6, 0x8e, 0x41, 0xe5, 0xd7, 0xe0, 0xd4, 0xfa, 0x99, 0xba, 0x0a,
	0x0f, 0x0d, 0xed, 0xff, 0xeb, 0x40, 0x33, 0x5c, 0x2b, 0x9b, 0x75, 0x60, 0x4f, 0x94, 0x8b, 0x5f,
	0x30, 0x91, 0xd6, 0x64, 0xd5, 0x90, 0x7c, 0x72, 0xc3, 0x62, 0xf7, 0xad, 0xbe, 0x3a, 0x6b, 0xdb,
	0x5e, 0x01, 0x34, 0xd4, 0xca, 0xda, 0x5a, 0xee, 0xa0, 0xfb, 0xbf, 0x03, 0xcc, 0xaa, 0x07, 0x43,
	0x35, 0xe7, 0xff, 0x68, 0x2d, 0xd7, 0x86, 0xfd, 0xd1, 0x78, 0x16, 0xd2, 0xf1, 0xc9, 0x99, 0xb7,
	0x43, 0x5a, 0xd0, 0xfc, 0x61, 0x1e, 0xce, 0x43, 0x63, 0xb7, 0x93, 0xe1, 0x30, 0x3c, 0x9f, 0x79,
	0x35, 0x72, 0x0f, 0x5a, 0xe7, 0x74, 0x72, 0x31, 0x9a, 0x8e, 0x26, 0x63, 0xaf, 0x4e, 0xf6, 0xa0,
	0x4e, 0xe7, 0x63, 0xaf, 0x41, 0xf6, 0xa1, 0x71, 0x3a, 0x19, 0x87, 0x5e, 0x53, 0x25, 0x86, 0x94,
	0x4e, 0xa8, 0xb7, 0xeb, 0xff, 0x5d, 0x83, 0xa3, 0x2d, 0xc9, 0xbf, 0x47, 0x19, 0x2f, 0x63, 0x19,
	0x93, 0x3e, 0xb4, 0xf3, 0x58, 0xf7, 0x00, 0x54, 0x87, 0xd7, 0x75, 0xba, 0x83, 0xf6, 0x76, 0x41,
	0xd4, 0x35, 0x84, 0xd1, 0xe4, 0x6b, 0x78, 0x98, 0x54, 0x36, 0x8a, 0x90, 0x73, 0xc6, 0x6d, 0x66,
	0xed, 0x8e, 0xcc, 0xa3, 0x0d, 0x1a, 0x2a, 0xd2, 0xac, 0xe0, 0xc3, 0x3d, 0x9d, 0x11, 0xe5, 0x2c,
	0x8d, 0x4a, 0x9e, 0x6b, 0x75, 0x5a, 0xd4, 0xd5, 0xc1, 0x33, 0x96, 0xce, 0x79, 0x4e, 0x9e, 0x80,
	0x9b, 0x5e, 0x62, 0x94, 0xe4, 0xa5, 0x90, 0xc8, 0x8d, 0x23, 0x29, 0xa4, 0x97, 0x38, 0x34, 0x11,
	0xf2, 0x29, 0x1c, 0x0a, 0xe4, 0xeb, 0x2c, 0xc1, 0x68, 0x8d, 0x5c, 0x95, 0x64, 0x6c, 0x48, 0x0f,
	0x6c, 0xf8, 0xc2, 0x44, 0xc9, 0x0b, 0x70, 0x13, 0x8e, 0xb1, 0xc4, 0x48, 0xdf, 0xc4, 0xee, 0x3b,
	0x6f, 0x02, 0x0c, 0xae, 0x02, 0x83, 0xdf, 0x1d, 0x68, 0x6f, 0xa9, 0x26, 0xc8, 0x6f, 0xe0, 0xdd,
	0x7e, 0xd5, 0xe4, 0xb1, 0x2d, 0xf9, 0x2d, 0xcf, 0xbd, 0xfb, 0x61, 0xb5, 0xd9, 0x56, 0x1b, 0x0c,
	0x26, 0x55, 0x1b, 0xf4, 0x3f, 0xfb, 0xe7, 0xe4, 0xe9, 0x9d, 0xcf, 0xe1, 0xae, 0xfb, 0x7a, 0xf9,
	0xe5, 0x4f, 0xcf, 0xd3, 0x4c, 0xfe, 0x5c, 0x2e, 0x82, 0x84, 0x5d, 0x99, 0x86, 0xb9, 0xe9, 0x9a,
	0x89, 0xe4, 0x79, 0x3f, 0xc5, 0xc2, 0x34, 0xd3, 0x4d, 0x44, 0xac, 0x93, 0xc5, 0xae, 0x8e, 0x3d,
	0xff, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x45, 0x61, 0x7a, 0xec, 0xef, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestSessionsClient is the client API for TestSessions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestSessionsClient interface {
	// Starts a set of test scenarios.
	//
	// This is a long-running operation that is managed by the Operations service
	// on the same server.  The long-running operation will assign a unique
	// identifier to the session.
	//
	// The unique identifier can be used to poll for the session's status and
	// results.  Streaming is not supported at present.
	//
	// It can also be used to cancel while in progress, but cancellations operate
	// like killing a running process. If they occur while results are being
	// reported, the persistent storage may receive some but not all of them.
	//
	// For the specification of a google.longrunning.Operation message, see the
	// Long-running AIP at https://aip.dev/151.
	StartTestSession(ctx context.Context, in *StartTestSessionRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
}

type testSessionsClient struct {
	cc *grpc.ClientConn
}

func NewTestSessionsClient(cc *grpc.ClientConn) TestSessionsClient {
	return &testSessionsClient{cc}
}

func (c *testSessionsClient) StartTestSession(ctx context.Context, in *StartTestSessionRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/proto.TestSessions/StartTestSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestSessionsServer is the server API for TestSessions service.
type TestSessionsServer interface {
	// Starts a set of test scenarios.
	//
	// This is a long-running operation that is managed by the Operations service
	// on the same server.  The long-running operation will assign a unique
	// identifier to the session.
	//
	// The unique identifier can be used to poll for the session's status and
	// results.  Streaming is not supported at present.
	//
	// It can also be used to cancel while in progress, but cancellations operate
	// like killing a running process. If they occur while results are being
	// reported, the persistent storage may receive some but not all of them.
	//
	// For the specification of a google.longrunning.Operation message, see the
	// Long-running AIP at https://aip.dev/151.
	StartTestSession(context.Context, *StartTestSessionRequest) (*longrunning.Operation, error)
}

// UnimplementedTestSessionsServer can be embedded to have forward compatible implementations.
type UnimplementedTestSessionsServer struct {
}

func (*UnimplementedTestSessionsServer) StartTestSession(ctx context.Context, req *StartTestSessionRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTestSession not implemented")
}

func RegisterTestSessionsServer(s *grpc.Server, srv TestSessionsServer) {
	s.RegisterService(&_TestSessions_serviceDesc, srv)
}

func _TestSessions_StartTestSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTestSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSessionsServer).StartTestSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TestSessions/StartTestSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSessionsServer).StartTestSession(ctx, req.(*StartTestSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestSessions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TestSessions",
	HandlerType: (*TestSessionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTestSession",
			Handler:    _TestSessions_StartTestSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test_sessions.proto",
}
